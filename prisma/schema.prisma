// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String      @id @default(cuid())
  email       String?     @unique
  displayName String?     // not shown on analysis - use anonymized label
  name        String?
  password    String?
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  accounts    Account[]
  sessions    Session[]
  assessments Assessment[]
  // index for performance if needed
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Domain {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  summary   String?
  roles     String   // JSON array of roles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skills    Skill[]
  assessments Assessment[]
}

model Skill {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  level       String   // BEGINNER, INTERMEDIATE, ADVANCED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  domainId    String?
  domain      Domain?  @relation(fields: [domainId], references: [id])
  questions   Question[]
  recommendations Recommendation[]
}

model Question {
  id             String   @id @default(cuid())
  text           String
  choices        String?  // JSON array of {id, text, isCorrect}
  correctChoice  String?  // choice id, stored for scoring, but not returned to user
  skillId        String
  skill          Skill    @relation(fields: [skillId], references: [id])
  difficulty     Int      @default(1) // 1-5
  version        Int      @default(1)
  timeEstimateSec Int?    @default(45)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  // Legacy fields for compatibility
  type           String?
  level          String?
  question       String?
  options        String?
  answer         String?
  expectedAnswer String?
  responseType   String?
  // Add tags, metadata as needed

  @@index([skillId])
}

model Assessment {
  id             String        @id @default(cuid())
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  domainId       String
  domain         Domain        @relation(fields: [domainId], references: [id])
  skillIds       String        // JSON array of skill IDs - snapshot of selected skills
  startedAt      DateTime      @default(now())
  submittedAt    DateTime?
  timeLimitSec   Int?          @default(1800)
  overallScore   Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          AssessmentItem[]

  @@index([userId])
  @@index([domainId])
  @@index([submittedAt])
}

model AssessmentItem {
  id           String   @id @default(cuid())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String
  questionId   String
  questionVer  Int       @default(1)
  selectedChoice String?
  isCorrect    Boolean?
  responseTimeMs Int?
  createdAt    DateTime @default(now())

  @@index([assessmentId])
}

model Recommendation {
  id        String @id @default(cuid())
  skillId   String
  skill     Skill  @relation(fields: [skillId], references: [id])
  title     String
  type      String // 'article'|'video'|'question'|'course'
  url       String?
  priority  Int    @default(1)
  qualityScore Float @default(0.5)
  meta      String? // JSON metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([skillId])
}

model UserQuizHistory {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  attemptedAt DateTime @default(now())

  @@index([userId])
  @@index([questionId])
}

// Career Analysis Models
model CareerQuestion {
  id       String   @id @default(cuid())
  category String   // Ability, Interest, Passion, TechDomain, WorkPreference, LearningStyle
  question String
  type     String   // MCQ, Ability (rating), OpenEnded
  options  String?  // JSON array for MCQ options
  answer   String?  // Correct answer for MCQ
  createdAt DateTime @default(now())

  @@index([category])
}

model CareerQuiz {
  id        String   @id @default(cuid())
  userId    String
  questions String   // JSON array of question IDs
  answers   String   // JSON array of answers
  scores    String   // JSON object with category scores
  completedAt DateTime @default(now())

  @@index([userId])
}

model UserCareerQuiz {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answeredAt DateTime @default(now())

  @@index([userId])
  @@index([questionId])
}